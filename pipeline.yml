---
jobs:
- name: build-docker-image
  public: true
  serial: true
  plan:
  - get: git-repo
    trigger: true
  - put: datetime-version
  - put: docker-image
    params:
      build: git-repo
      tag_file: datetime-version/version
  - task: kubectl-apply
    config:
      platform: linux
      inputs:
      - name: datetime-version
      - name: git-repo
      image_resource:
        type: registry-image
        source: 
          repository: alpine/k8s 
          tag: 1.14.9
      params:
        version: files/version
        kube_api_server_uri: ((credentials.kube_api_server_uri))
        kube_api_token: ((credentials.kube_api_token))
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -l
          image_version=$(cat datetime-version/version)
          echo $image_version
          sed -i 's@image_version@'"$image_version"'@' git-repo/k8s/deploy.yaml
          sed -i 's@kube_api_token@'"$kube_api_token"'@' git-repo/k8s/kubeconfig.yaml
          sed -i 's@kube_api_server_uri@'"$kube_api_server_uri"'@' git-repo/k8s/kubeconfig.yaml
          mkdir -p ~/.kube
          cp git-repo/k8s/kubeconfig.yaml ~/.kube/config
          kubectl apply -f git-repo/k8s/deploy.yaml

- name: verify-deployment
  public: true
  serial: true
  plan:
  - get: git-repo
    trigger: true
    passed:
    - build-docker-image
  - task: kubectl-get
    config:
      platform: linux
      inputs:
      - name: git-repo
      image_resource:
        type: registry-image
        source: 
          repository: alpine/k8s 
          tag: 1.14.9
      params:
        version: files/version
        kube_api_server_uri: ((credentials.kube_api_server_uri))
        kube_api_token: ((credentials.kube_api_token))
      run:
        path: /bin/sh
        args:
        - -c
        - |
          ls -l
          sed -i 's@kube_api_token@'"$kube_api_token"'@' git-repo/k8s/kubeconfig.yaml
          sed -i 's@kube_api_server_uri@'"$kube_api_server_uri"'@' git-repo/k8s/kubeconfig.yaml
          mkdir -p ~/.kube
          cp git-repo/k8s/kubeconfig.yaml ~/.kube/config
          kubectl get pods -o wide
          IP=$(kubectl get svc python-slack-bot-svc -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl "$IP:8080/ping"
          status=$?
          if [ $status -ne 0 ]; then
              exit 1
          fi
    on_failure:
      put: notify
      params:
        message: Bot Health Verification Failed 
        mode: concise
        alert_type: failed
    on_success:
      put: notify
      params:
        message: Bot Build and Health Verification Successfull 
        mode: concise
        alert_type: success
resource_types:
- name: datetime-version
  type: registry-image
  source:
    repository: dcsg/datetime-version-resource
- name: slack-notifier
  type: docker-image
  source:
    repository: mockersf/concourse-slack-notifier

resources:
- name: datetime-version
  type: datetime-version
  source:
    timezone: 'Europe/Lisbon' # default is 'UTC'
    format: '20060102.150405' # default is '20060102-150405'

- name: git-repo
  type: git
  source:
    uri: https://github.tools.sap/I500506/innoweek-ops-bot.git
    branch: master
    private_key: null
    skip_ssl_verification: true
    password: ((credentials.landscape_git_password))
    username: ((credentials.landscape_git_user))

- name: docker-image
  type: docker-image
  source:
    email: ((credentials.docker_email))
    username: ((credentials.docker_user))
    password: ((credentials.docker_password))
    repository: anaikdocker/slackbot

- name: notify
  type: slack-notifier
  source:
    url: https://hooks.slack.com/services/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